#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_PLAYLISTS 20

typedef struct musica {
    int id;
    char titulo[200];
    int id_artista;
    int duracao; // segundos
} musica;

typedef struct artista {
    int id;
    char nome[200];
    char genero[200];
} artista;

typedef struct musica_no {
    musica *musica;
    struct musica_no *prox;
} musica_no;

typedef struct artista_no {
    artista *artista;
    struct artista_no *prox;
} artista_no;

typedef struct playlist_no {
    int id;
    musica *musica;
    struct playlist_no *prox;
} playlist_no;

typedef struct lplaylists_no { 
    int id;
    char nome[200];
    playlist_no *playlist;
    struct lplaylists_no *prox;
} lplaylists_no;


void imprime_artistas(artista_no *head) {
    printf("Lista de artistas:\n\n");
    while (head != NULL) {
        printf("ID: %d\n", head->artista->id);
        printf("Nome: %s\n", head->artista->nome);
        printf("Genero: %s\n\n", head->artista->genero);
        head = head->prox;
    }
}

void imprime_musicas_por_artista(musica_no *head, artista_no *artistas, int id_artista) {
    printf("Musicas do artista com ID %d:\n\n", id_artista);
    while (head != NULL) {
        if (head->musica->id_artista == id_artista) {
            int h, m, s;
            s = head->musica->duracao;
            h = s / 3600;
            s %= 3600;
            m = s / 60;
            s %= 60;

            printf("ID: %d\n", head->musica->id);
            printf("Titulo: %s\n", head->musica->titulo);
            printf("Duracao: %02d:%02d:%02d\n\n", h, m, s);
        }
        head = head->prox;
    }
}
 


void cria_playlist(lplaylists_no **head, musica_no *musicas) {
    int id_musica;
    char entrada[1000];

    printf("Digite os IDs das musicas separados por espaco:\n");
    scanf(" %[^\n]s", entrada);

    lplaylists_no *nova_lplaylist = (lplaylists_no *)malloc(sizeof(lplaylists_no));
    nova_lplaylist->id = 1; // ou defina um novo ID de acordo com sua necessidade
    printf("Digite um nome para a playlist:\n");
    scanf(" %[^\n]s", nova_lplaylist->nome);

    playlist_no *nova_playlist = NULL;
    playlist_no *playlist_atual = NULL;
    char *ptr = strtok(entrada, " ");
    while (ptr != NULL) {
        id_musica = atoi(ptr);
        musica_no *musica_atual = musicas;
        while (musica_atual != NULL) {
            if (musica_atual->musica->id == id_musica) {
                playlist_no *nova_musica = (playlist_no *)malloc(sizeof(playlist_no));
                nova_musica->id = id_musica;
                nova_musica->musica = musica_atual->musica;

                if (nova_playlist == NULL) {
                    nova_playlist = nova_musica;
                    nova_musica->prox = nova_musica;
                } else {
                    playlist_atual = nova_playlist;
                    while (playlist_atual->prox != nova_playlist) {
                        playlist_atual = playlist_atual->prox;
                    }
                    playlist_atual->prox = nova_musica;
                    nova_musica->prox = nova_playlist;
                }
                break;
            }
            musica_atual = musica_atual->prox;
        }
        ptr = strtok(NULL, " ");
    }

    nova_lplaylist->playlist = nova_playlist;
    nova_lplaylist->prox = *head;
    *head = nova_lplaylist;

    printf("Playlist criada com sucesso!\n");
}

void insere_artista(artista_no **head) {
    artista *novo_artista = (artista *)malloc(sizeof(artista));

    printf("Digite o ID do artista: ");
    scanf("%d", &novo_artista->id);
    printf("Digite o nome do artista: ");
    scanf("%s", novo_artista->nome);
    printf("Digite o genero musical do artista: ");
    scanf("%s", novo_artista->genero);

    artista_no *novo_no = (artista_no *)malloc(sizeof(artista_no));
    novo_no->artista = novo_artista;
    novo_no->prox = *head;
    *head = novo_no;
}

void insere_musica(musica_no **head, artista_no *artistas) {
    musica *nova_musica = (musica *)malloc(sizeof(musica));

    printf("Digite o ID da musica: ");
    scanf("%d", &nova_musica->id);
    printf("Digite o titulo da musica: ");
    scanf("%s", nova_musica->titulo);
    printf("Digite o ID do artista: ");
    scanf("%d", &nova_musica->id_artista);
    printf("Digite a duracao da musica em segundos: ");
    scanf("%d", &nova_musica->duracao);

    musica_no *novo_no = (musica_no *)malloc(sizeof(musica_no));
    novo_no->musica = nova_musica;
    novo_no->prox = *head;
    *head = novo_no;
}

char *busca_nome_artista(artista_no *head, int id_artista) {
    while (head != NULL) {
        if (head->artista->id == id_artista) {
            return head->artista->nome;
        }
        head = head->prox;
    }
    return NULL;
}

void imprime_musicas(musica_no *head, artista_no *artistas) {
    while (head != NULL) {
        int h, m, s;
        s = head->musica->duracao;
        h = s / 3600;
        s %= 3600;
        m = s / 60;
        s %= 60;

        printf("ID: %d\n", head->musica->id);
        printf("Titulo: %s\n", head->musica->titulo);
        printf("Artista: %s\n", busca_nome_artista(artistas, head->musica->id_artista));
        printf("Duracao: %02d:%02d:%02d\n\n", h, m, s);

        head = head->prox;
    }
}

void shuffle(playlist_no *head) {
    // contar o número de músicas na playlist
    int num_musicas = 0;
    playlist_no *playlist_atual = head;
    while (playlist_atual != NULL) {
        num_musicas++;
        playlist_atual = playlist_atual->prox;
    }

    // criar um array de índices das músicas na playlist
    int *indices = (int *)malloc(num_musicas * sizeof(int));
    playlist_atual = head;
    for (int i = 0; i < num_musicas; i++) {
        indices[i] = i;
        playlist_atual = playlist_atual->prox;
    }

    // embaralhar os índices aleatoriamente
    for (int i = 0; i < num_musicas; i++) {
        int j = rand() % num_musicas;
        int temp = indices[i];
        indices[i] = indices[j];
        indices[j] = temp;
    }

    // percorrer a lista encadeada de playlists, reordenando as músicas de acordo com os índices embaralhados
    playlist_no **playlist_array = (playlist_no **)malloc(num_musicas * sizeof(playlist_no *));
    playlist_atual = head;
    for (int i = 0; i < num_musicas; i++) {
        playlist_array[i] = playlist_atual;
        playlist_atual = playlist_atual->prox;
    }

    for (int i = 0; i < num_musicas; i++) {
        playlist_array[i]->musica = playlist_array[indices[i]]->musica;
    }

    // liberar a memória alocada
    free(indices);
    free(playlist_array);
}

artista_no *encontra_artista_por_id(artista_no *head, int id) {
    artista_no *artista_atual = head;
    while (artista_atual != NULL) {
        if (artista_atual->artista->id == id) {
            return artista_atual;
        }
        artista_atual = artista_atual->prox;
    }
    return NULL;
}

void imprime_playlist(lplaylists_no *head, artista_no *artistas) {
    lplaylists_no *playlist_atual = head;

    while (playlist_atual != NULL) {
        playlist_no *musicas_playlist = playlist_atual->playlist;
        while (musicas_playlist != NULL) {
            printf("Playlist: %s\n", playlist_atual->nome);
            printf("ID: %d\n", musicas_playlist->musica->id);
            printf("Titulo: %s\n", musicas_playlist->musica->titulo);
            printf("Artista: %s\n", encontra_artista_por_id(artistas, musicas_playlist->musica->id_artista)->artista->nome);
            printf("Duracao: %02d:%02d:%02d\n", musicas_playlist->musica->duracao / 3600, (musicas_playlist->musica->duracao / 60) % 60, musicas_playlist->musica->duracao % 60);
            printf("\n");
            musicas_playlist = musicas_playlist->prox;
        }
        playlist_atual = playlist_atual->prox; 
    }
}

void remove_musica(musica_no **head, lplaylists_no **playlists, int id_musica) {
    // remover a música da lista encadeada de músicas
    musica_no *musica_atual = *head;
    musica_no *musica_anterior = NULL;
    while (musica_atual != NULL) {
        if (musica_atual->musica->id == id_musica) {
            if (musica_anterior != NULL) {
                musica_anterior->prox = musica_atual->prox;
            } else {
                *head = musica_atual->prox;
            }
            free(musica_atual->musica);
            free(musica_atual);
            break;
        }
        musica_anterior = musica_atual;
        musica_atual = musica_atual->prox;
    }

    // remover a música de todas as playlists em que ela participa
    for (int i = 0; i < 2; i++) {
    if(playlists[i] != NULL) {  // Adicione esta linha para verificar se a playlist é válida
        playlist_no *playlist_atual = playlists[i];
        playlist_no *playlist_anterior = NULL;
        while (playlist_atual != NULL) {
            if (playlist_atual->musica->id == id_musica) {
                if (playlist_anterior != NULL) {
                    playlist_anterior->prox = playlist_atual->prox;
                } else {
                    playlists[i] = playlist_atual->prox;
                }
                free(playlist_atual);
                break;
            }
            playlist_anterior = playlist_atual;
            playlist_atual = playlist_atual->prox;
        }
    }
}

}

int main() {
    artista_no *artistas = NULL;
    musica_no *musicas = NULL;
    lplaylists_no *lplaylists = NULL;
    playlist_no *playlist = NULL;

    int id_musica;
    int id_artista;
    int opcao = 0;
    while (opcao != 4) {
        printf("Escolha uma opcao:\n");
        printf("1. Cadastrar novo artista\n");
        printf("2. Cadastrar nova musica\n");
        printf("3. imprimir todas as musicas\n");
        printf("4. Sair\n");
        printf("5. imprimir todas as musicas de um artista\n");
        printf("6. imprimir todos os artistas\n");
        printf("7. Playlist com musicas aleatorias\n");
        printf("8. Remover uma musica de todas as playlists\n");
        printf("9. Imprime playlists\n");
        printf("10. Cria playlists\n");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                insere_artista(&artistas);
                break;
            case 2:
                insere_musica(&musicas, artistas);
                break;
            case 3:
                imprime_musicas(musicas, artistas);
                break;
            case 4:
                printf("Programa encerrado!");
                break;
            case 5:
                
                printf("Digite o ID do artista que deseja ver as musicas.\n");
                scanf("%d", &id_artista);
                imprime_musicas_por_artista(musicas, artistas, id_artista);
                break;
            case 6:
                imprime_artistas(artistas);
                break;
            case 7:
                shuffle(playlist);
                break;
            case 8:
                remove_musica(&musicas, &lplaylists, id_musica);
                break;
            case 9:
                imprime_playlist(lplaylists, artistas);
                break;
            case 10:
                cria_playlist(&lplaylists ,musicas);        
                break;
        } 
    }
    return 0;
}







--------------------------------------------------------------------------------
void remove_musica(musica_no **head, lplaylists_no **lplaylists, int id_musica) {
    // remover a música da lista encadeada de músicas
    musica_no *musica_atual = *head;
    musica_no *musica_anterior = NULL;
    while (musica_atual != NULL) {
        if (musica_atual->musica->id == id_musica) {
            if (musica_anterior != NULL) {
                musica_anterior->prox = musica_atual->prox;
            } else {
                *head = musica_atual->prox;
            }
            free(musica_atual->musica);
            free(musica_atual);
            break;
        }
        musica_anterior = musica_atual;
        musica_atual = musica_atual->prox;
    }

    // remover a música de todas as playlists em que ela participa
    lplaylists_no *lplaylist_atual = *lplaylists;
    while (lplaylist_atual != NULL) {
        playlist_no *playlist_atual = lplaylist_atual->playlist;
        playlist_no *playlist_anterior = NULL;
        while (playlist_atual != NULL) {
            if (playlist_atual->musica->id == id_musica) {
                if (playlist_anterior != NULL) {
                    playlist_anterior->prox = playlist_atual->prox;
                } else {
                    lplaylist_atual->playlist = playlist_atual->prox;
                }
                free(playlist_atual);
                break;
            }
            playlist_anterior = playlist_atual;
            playlist_atual = playlist_atual->prox;
        }
        lplaylist_atual = lplaylist_atual->prox;
    }
}

